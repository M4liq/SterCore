@model List<leave_management.Models.DetailsWorkTimeScheduleVM>
@{
    ViewData["Title"] = "Szczegóły harmonogramu";
}

<h1>Szczegóły harmonogramu</h1>
<div class="row">
    <div class="col-md-12">
        <div id="Schedule"></div>

    </div>
</div>
<div>
    <a class="btn btn-primary" asp-action="Index"><i class="fa fa-arrow-alt-circle-left"></i> Powrót do podsumowania</a>
</div>




@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/scheduler/js/ej2/dist/ej2.min.js" type="text/javascript"></script>

    <script id="apptemplate" type="text/x-template">
        <div class="template-wrap" style="background:${PrimaryColor}">
            <div class="subject" style="background:${PrimaryColor}">${Subject}</div>
            <div class="e-time" style="background:${PrimaryColor}">${ShiftStartTime} - ${ShiftEndTime}</div>
            <div class="workTime" style="background:${PrimaryColor}">(${WorkTimeLength})</div>
        </div>
    </script>

    <script id="EventEditorTemplate" type="text/x-template">
        <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr class="none">
                    <td class="e-textlabel">Tytuł</td>
                    <td colspan="4">
                        <input id="Subject" class="e-field e-input" type="text" value="+" name="Subject" style="width: 100%" />
                    </td>
                </tr>

                <tr class="none">
                    <td class="e-textlabel">Od</td>
                    <td colspan="4">
                        <input id="StartTime" class="e-field" type="text" name="StartTime" />
                    </td>
                </tr>
                <tr class="none">
                    <td class="e-textlabel">Do</td>
                    <td colspan="4">
                        <input id="EndTime" class="e-field" type="text" name="EndTime" />
                    </td>
                </tr>

                <tr>
                    <td class="e-textlabel">Godzina od</td>
                    <td colspan="4">
                        <input id="ShiftStartTime" class="e-field" type="text" name="ShiftStartTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Godzina do</td>
                    <td colspan="4">
                        <input id="ShiftEndTime" class="e-field" type="text" name="ShiftEndTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">w tym przerwa (min.):</td>
                    <td colspan="4">
                        <input type="text" id="pauseTimeEdit" name="PauseTimeLength" class="e-field" style="width: 60%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Komentarz</td>
                    <td colspan="4">
                        <textarea id="Description" class="e-field e-input" name="Description" rows="3" cols="50"
                                  style="width: 100%; height: 60px !important; resize: vertical"></textarea>
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Pracownik</td>
                    <td colspan="4">
                        <input type="text" id="EmployeeId" name="EmployeeId" class="e-field" style="width: 100%" />
                    </td>
                </tr>
            </tbody>
        </table>
    </script>




    <script>
        let schedulerEvents = [];
        let tempStartDate;
        let tempEndDate;
        let tempEvent;
        @foreach (var item in Model)
        {

            @:tempStartDate = new Date("@item.StartTime");
            @:console.log(tempStartDate)
            @:tempEndDate = new Date("@item.EndTime");
            @:tempEvent = { Id:@item.Id, SchedulerId:@item.SchedulerId, Subject: "@item.Subject", Guid: "@item.Guid", StartTime: new Date(tempStartDate), EndTime: new Date(tempEndDate), ShiftStartTime: "@item.ShiftStartTime", ShiftEndTime: "@item.ShiftEndTime", IsAllDay:@item.IsAllDay.ToString().ToLower(), EmployeeId: "@item.EmployeeId", Description: "@item.Description", PauseTimeLength: "@item.PauseTimeLength", WorkTimeLength: "@item.WorkTimeLength" }
            @:console.log(tempEvent)
            @:schedulerEvents.push(tempEvent);
        }

        var instance = new ej.base.Internationalization();
        window.getTimeString = function (value) {
            return instance.formatDate(value, { skeleton: 'hm' });
        };

        var selectedDateFrom = new Date('@String.Format("{0}/{1}/{2}", Model[0].DateFrom.Month, Model[0].DateFrom.Day, Model[0].DateFrom.Year)');
        var selectedDateTo = new Date('@String.Format("{0}/{1}/{2}",Model[0].DateTo.Month,Model[0].DateTo.Day,Model[0].DateTo.Year)');
        var selectedEmployeeId="";
        var selectedTimeTo = new Date(2020, 1, 1, 16, 0);
        var selectedTimeFrom = new Date(2020, 1, 1, 8, 0);
        var dataSources = [];
        var unAvailableDates = [];
        var i = 1;
        @for(var i = 0; i<Model[0].EmployeeIds.Count();i++) {
            @: var temp = { EmployeeText: "@Model[0].EmployeeFullNames[i]", Id: "@Model[0].EmployeeIds[i]", EmployeeColor: "#275dad" };
            @: dataSources.push(temp);
         }

         @foreach (var item in Model[0].UnavailableDates)
	      {
             @: unAvailableDates.push(new Date('@String.Format("{0}/{1}/{2}", item.Month, item.Day, item.Year)'))
	      }
        ej.schedule.Schedule.Inject(ej.schedule.TimelineMonth);
        var scheduleObj = new ej.schedule.Schedule({
            views: ['TimelineMonth'],
            height: '550px',
            currentView: 'TimelineMonth',
            showQuickInfo: false,
            allowResizing: false,
            editorTemplate: '#EventEditorTemplate',
            popupOpen: function (args) {
                  if (args.type === 'Editor') {
                      args.cancel = true;
                  }
            },

            actionBegin: function (args) {
                if (args.requestType === 'eventCreate' || args.requestType === 'eventChange') {
                    args.cancel = true;
                }
            },


            selectedDate: new Date(@String.Format("{0}, {1}, {2}",Model[0].DateFrom.Year,Model[0].DateFrom.Month-1,Model[0].DateFrom.Day)),
            minDate: "@String.Format("{0}, {1}, {2}",Model[0].DateFrom.Year,Model[0].DateFrom.Month,Model[0].DateFrom.Day)",
            maxDate: "@String.Format("{0}, {1}, {2}",Model[0].DateTo.Year,Model[0].DateTo.Month,Model[0].DateTo.Day)",
            group: {
                resources: ['Employees']
            },
            resources: [{
                field: 'EmployeeId', title: 'Employee',
                name: 'Employees', allowMultiple: true,
                dataSource: dataSources,
                textField: 'EmployeeText', idField: 'Id', colorField: 'EmployeeColor'
            }],
            eventSettings: {
                template: '#apptemplate',
                dataSource: schedulerEvents,
                fields: {
                    subject: { name: 'Subject', title: 'Tytul', default: '+' }
                }
            }
        });
        scheduleObj.appendTo('#Schedule');











        function getDifferenceWorkTime(data) {
            let timeReg = /(\d+)\:(\d+)/;
            let startTime = data.ShiftStartTime.match(timeReg);
            let endTime = data.ShiftEndTime.match(timeReg);

            let startTimeDate = new Date();
            startTimeDate.setHours(startTime[1]);
            startTimeDate.setMinutes(startTime[2]);

            let endTimeDate = new Date();
            endTimeDate.setHours(endTime[1]);
            endTimeDate.setMinutes(endTime[2]);
            let resultTime = 0;
            if (startTimeDate > endTimeDate) {
                resultTime = startTimeDate.getHours() * 60 + startTimeDate.getMinutes() - endTimeDate.getHours() * 60 + endTimeDate.getMinutes();
            }
            else {
                 resultTime = endTimeDate.getHours() * 60 + endTimeDate.getMinutes() - startTimeDate.getHours() * 60 - startTimeDate.getMinutes();
            }
            return resultTime;
        }



        function time_convert(num)
         {
          var hours = Math.floor(num / 60);
          var minutes = num % 60;
          if (minutes<10){
            minutes='0'+minutes;
          }
          return hours + ":" + minutes;
        }


    </script>

}
@section Head {
    <!-- Essential JS 2 Scheduler's dependent material theme -->
    <link href="~/lib/scheduler/styles/base/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/buttons/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/calendars/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/dropdowns/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/inputs/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/splitbuttons/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/lists/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/popups/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/navigations/material.css" rel="stylesheet" type="text/css" />
    <!-- Essential JS 2 Scheduler's material theme -->
    <link href="~/lib/scheduler/styles/schedule/material.css" rel="stylesheet" type="text/css" />

}
