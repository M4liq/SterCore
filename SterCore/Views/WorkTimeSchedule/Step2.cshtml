@model leave_management.Models.Step2WorkTimeScheduleVM

@{
    ViewData["Title"] = "Harmonogram";
}

<h1>Harmonogram</h1>

<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Step2">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div id="add"></div>
            <div class="col-md-12">
                <p class="d-inline-block">od:</p>
                <div class="d-inline-block ">
                    <input id="timeFrom" />
                </div>
                <p class="d-inline-block">do:</p>
                <div class="d-inline-block ">
                    <input id="timeTo" />
                </div>
                <p class="d-inline-block">od:</p>
                <div class="d-inline-block">
                    <input type="text" id="dateFrom" />
                </div>
                <p class="d-inline-block">do:</p>
                <div class="d-inline-block">
                    <input type="text" id="dateTo" />
                </div>
                <p class="d-inline-block">w tym przerwa (min.):</p>
                <div class="d-inline-block ">
                    <input id="pauseTime" />
                </div>
                <p class="d-inline-block">Komentarz:</p>
                <div class="d-inline-block ">
                    <input id="description" />
                </div>
                <p class="d-inline-block">pomiń dni wolne:</p>
                <div class="d-inline-block ">
                    <input type="checkbox" id="skipFreeDays" />
                </div>
                <p class="d-inline-block">dla:</p>
                <div class="d-inline-block ">
                    @Html.DropDownListFor(q => q.EmployeeIds, new SelectList(Model.Employees, "Value", "Text"), "Wybierz pracownika", new { @class = "form-control", id = "employeeDropDownList" })
                </div>
                <div class="d-inline-block ">
                    <button class="btn btn-success" type="button" id="addEventsToSchedule">Dodaj</button>
                </div>
            </div>
            <div id="Schedule"></div>


            <div class="form-group">
                <input type="submit" value="Zapisz harmonogram" class="btn btn-success btn-block" />
            </div>
        </form>
    </div>
</div>

<div>
    <a class="btn btn-primary" asp-action="Index"><i class="fa fa-arrow-alt-circle-left"></i> Powrót do podsumowania</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/scheduler/js/ej2/dist/ej2.min.js" type="text/javascript"></script>
    
    <script id="apptemplate" type="text/x-template">
        <div class="template-wrap" style="background:${PrimaryColor}">
            <div class="subject" style="background:${PrimaryColor}">${Subject}</div>
            <div class="e-time" style="background:${PrimaryColor}">${getTimeString(StartTime)} - ${getTimeString(EndTime)}</div>
            
            <div class="workTime" style="background:${PrimaryColor}">(${WorkTimeLength})</div>
        </div>
    </script>

    <script>
        var instance = new ej.base.Internationalization();
        window.getTimeString = function (value) {
            return instance.formatDate(value, { skeleton: 'hm' });
        };

        var selectedDateFrom = new Date('@String.Format("{0}/{1}/{2}", Model.DateFrom.Month, Model.DateFrom.Day, Model.DateFrom.Year)');
        var selectedDateTo = new Date('@String.Format("{0}/{1}/{2}",Model.DateTo.Month,Model.DateTo.Day,Model.DateTo.Year)');
        var selectedEmployeeId;
        var selectedTimeTo = new Date(2020, 1, 1, 16, 0);
        var selectedTimeFrom = new Date(2020, 1, 1, 8, 0);
        var dataSources = [];
        var unAvailableDates = [];
        var i = 1;
        @for(var i = 0; i<Model.EmployeeIds.Count();i++) {
            @: var temp = { EmployeeText: "@Model.EmployeeFullNames[i]", Id: "@Model.EmployeeIds[i]", EmployeeColor: "#275dad" };
            @: dataSources.push(temp);
         }

         @foreach (var item in Model.UnavailableDates)
	      {
             @: unAvailableDates.push(new Date('@String.Format("{0}/{1}/{2}", item.Month, item.Day, item.Year)'))
	      }
        ej.schedule.Schedule.Inject(ej.schedule.TimelineMonth);
        var scheduleObj = new ej.schedule.Schedule({
            views: ['TimelineMonth'],
            height: '550px',
            currentView: 'TimelineMonth',
            showQuickInfo: false,
            allowResizing: false,
            selectedDate: new Date(@String.Format("{0}, {1}, {2}",Model.DateFrom.Year,Model.DateFrom.Month-1,Model.DateFrom.Day)),
            minDate: "@String.Format("{0}, {1}, {2}",Model.DateFrom.Year,Model.DateFrom.Month,Model.DateFrom.Day)",
            maxDate: "@String.Format("{0}, {1}, {2}",Model.DateTo.Year,Model.DateTo.Month,Model.DateTo.Day)",
            group: {
                resources: ['Employees']
            },
            resources: [{
                field: 'EmployeeId', title: 'Employee',
                name: 'Employees', allowMultiple: true,
                dataSource: dataSources,
                textField: 'EmployeeText', idField: 'Id', colorField: 'EmployeeColor'
            }],
            eventSettings: {
            template: '#apptemplate'
            }
        });
        scheduleObj.appendTo('#Schedule');


        ej.base.enableRipple(true);
        var timepickerFrom = new ej.calendars.TimePicker({
            value: '08:00',
            step: 15,
            format: 'HH:mm',
            change: function (args) {
                selectedTimeFrom = args.value;
                console.log(selectedTimeFrom)
            }
        });
        timepickerFrom.appendTo('#timeFrom');

        var timepickerTo = new ej.calendars.TimePicker({
            value: '16:00',
            step: 15,
            format: 'HH:mm',
            change: function (args) {
                selectedTimeTo = args.value;
                console.log(selectedTimeFrom)
            }
        });
        timepickerTo.appendTo('#timeTo');

        var calendarDateTo = new ej.calendars.DatePicker({
            change: function (args) {
                //selectedDateTo = args.value.toLocaleDateString('pl-PL');
                selectedDateTo = new Date(args.value);
                console.log(selectedDateTo);
        },
        min: new Date('@String.Format("{0}/{1}/{2}", @Model.DateFrom.Month, @Model.DateFrom.Day, @Model.DateFrom.Year)'),
        max:new Date('@String.Format("{0}/{1}/{2}", @Model.DateTo.Month, @Model.DateTo.Day, @Model.DateTo.Year)'),
        value: new Date('@String.Format("{0}/{1}/{2}", @Model.DateTo.Month, @Model.DateTo.Day, @Model.DateTo.Year)'),
        });
        calendarDateTo.appendTo('#dateTo');

        var calendarDateFrom = new ej.calendars.DatePicker({
            change: function (args) {
                //selectedDateFrom = args.value.toLocaleDateString('pl-PL');
                selectedDateFrom = new Date(args.value);
                console.log(selectedDateFrom);
            },
            min: new Date('@String.Format("{0}/{1}/{2}", @Model.DateFrom.Month, @Model.DateFrom.Day, @Model.DateFrom.Year)'),
            max: new Date('@String.Format("{0}/{1}/{2}", @Model.DateTo.Month, @Model.DateTo.Day, @Model.DateTo.Year)'),
            value: new Date('@String.Format("{0}/{1}/{2}", @Model.DateFrom.Month, @Model.DateFrom.Day, @Model.DateFrom.Year)'),
        });
        calendarDateFrom.appendTo('#dateFrom');

        $(document).ready(function () {
            var i = 1;
            $("#employeeDropDownList").change(function () {
                selectedEmployeeId = this.value;
            });
            $("#addEventsToSchedule").click(function () {
                var Events = [];
                var pauseTimeVal = 0;
                if($('#pauseTime').val()){
                    pauseTimeVal = parseInt($('#pauseTime').val(), 10);
                }
                var workTimeValue = (selectedTimeTo.getHours()*60+selectedTimeTo.getMinutes())-(selectedTimeFrom.getHours()*60+selectedTimeFrom.getMinutes())- pauseTimeVal;
                var descriptionText  = $('#description').val();
                     
                for (var d = selectedDateFrom; d <= selectedDateTo; d.setDate(d.getDate() + 1)) {
                    var thisDayIsAvailable = true;
                    if ($("#skipFreeDays").prop('checked')) {
                        unAvailableDates.forEach(function(unAvailableDay){
                            if (d.getTime() === unAvailableDay.getTime()) {
                                thisDayIsAvailable = false;
                            }
                        })
                    }
                if(thisDayIsAvailable){
                        var MyEvent ={
                        Id: i,
                        Subject: '+',
                        StartTime: new Date(selectedDateFrom.getFullYear(), selectedDateFrom.getMonth(), selectedDateFrom.getDate(), selectedTimeFrom.getHours(), selectedTimeFrom.getMinutes()),
                        EndTime: new Date(selectedDateFrom.getFullYear(), selectedDateFrom.getMonth(), selectedDateFrom.getDate(), selectedTimeTo.getHours(), selectedTimeTo.getMinutes()),
                        IsAllDay: false,
                        EmployeeId: selectedEmployeeId,
                        Description: descriptionText,
                        WorkTimeLength: time_convert(workTimeValue)
                        }
                        i++;
                        Events.push(MyEvent)
                    } 
                }
                  scheduleObj.addEvent(Events);
              });
        });


        // Restricts input for each element in the set of matched elements to the given inputFilter.
        (function($) {
          $.fn.inputFilter = function(inputFilter) {
            return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function() {
              if (inputFilter(this.value)) {
                this.oldValue = this.value;
                this.oldSelectionStart = this.selectionStart;
                this.oldSelectionEnd = this.selectionEnd;
              } else if (this.hasOwnProperty("oldValue")) {
                this.value = this.oldValue;
                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
              } else {
                this.value = "";
              }
            });
          };
        }(jQuery));


        // Install input filters.
        $("#pauseTime").inputFilter(function(value) {
          return /^-?\d*$/.test(value); });
        
        function time_convert(num)
         { 
          var hours = Math.floor(num / 60);  
          var minutes = num % 60;
          if (minutes<10){
            minutes='0'+minutes;  
          }
          return hours + ":" + minutes;         
        }


    </script>

}
@section Head {
    <!-- Essential JS 2 Scheduler's dependent material theme -->
    <link href="~/lib/scheduler/styles/base/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/buttons/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/calendars/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/dropdowns/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/inputs/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/splitbuttons/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/lists/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/popups/material.css" rel="stylesheet" type="text/css" />
    <link href="~/lib/scheduler/styles/navigations/material.css" rel="stylesheet" type="text/css" />
    <!-- Essential JS 2 Scheduler's material theme -->
    <link href="~/lib/scheduler/styles/schedule/material.css" rel="stylesheet" type="text/css" />

}
